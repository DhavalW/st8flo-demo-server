angular.module('SFUI', [])




.service('sfui_service', ['$q', '$rootScope', 'sfui_socket', 'SF_FLOWTYPES', sfui_service])

.service('sfui_socket', ['$q','$rootScope', sfui_socket]);


function sfui_service($q, $rootScope, sfui_socket, SF_FLOWTYPES) {

	this.SFUI = function (pSfObj) {

		var _self = this;
		this.sfObj = pSfObj || {};
		this.jsonUITree = {};


		$rootScope.$on('SF_Composer_RequestConfig',function(scope,data){
			console.log('SF UI - exporting config from SF obj (appName %s, clientId %s) as - ',data._name,data._clientId,data);
			sfui_socket.sendConfig(_self.sfObj);
		});


		this.debugCallback = function (err, result) {
			console.log('SF UI - debug Callback invoked with params :', err, result);
			console.log(' result = ', result);
			sfui_socket.sendUpdate(result);
		};

		this.attachTo = function (sfObj,serverUrl) {
			if (sfObj) {
				this.sfObj = sfObj;
				var cb = this.debugCallback;
				sfObj.attachDebugCallback(cb);
				// sfui_socket.setAppFilters(sfObj._appName,sfObj._clientId);
				sfui_socket.setSFobj(sfObj);
				sfui_socket.connectTo(serverUrl);
				console.log('SF UI - attaching SFUI to St8Flo : ', sfObj._name);
			}
		};
	};
};


function sfui_socket($q,$rootScope) {
	var socketIO,socket;
	var _sfObj;

	this.connectTo = function(serverUrl){
		socketIO = io.connect(serverUrl);

		socketIO.on('connect',function(sck){
			socket = sck;
			console.log('Socket - Connected');
		});

		socketIO.on('SF_Composer_RequestConfig',function(data){
			console.log('\n\n****** SF UI - SOCKET EVENT Recvd - request for config as (_appName, _clientId) - ',data._appName,data._clientId,data);
			if(_sfObj){
				console.log('App filters are set to appName %s, clientId %s',_sfObj._appName,_sfObj._clientId);
				if (data._appName == _sfObj._appName && data._clientId == _sfObj._clientId){
					console.log('SF UI - EVENT Recvd & matched. forwarding to controller - ',data._name,data._clientId);
					$rootScope.$broadcast('SF_Composer_RequestConfig',data);
				}
			}
		});

		socketIO.on('SF_Composer_pushConfig',function(data){
			console.log('\n\n****** SF UI - SOCKET EVENT Recvd - config recvd for (appName %s, clientId %s) as - ',data._appName,data._clientId,data);
			if(_sfObj){
				console.log('App filters are set to appName %s, clientId %s',_sfObj._appName,_sfObj._clientId);

				if (data._appName == _sfObj._appName && (data._clientId == _sfObj._clientId || data._clientId =="*") ){
					// $rootScope.$broadcast('SF_Composer_pushConfig',data);
					console.log('SF UI - Pushing recvd config into SF obj (appName %s, clientId %s) as - ',data._name,data._clientId,data);
					_sfObj.importConfig(data,data._initScript,true,false);
				}
			}
		});
	};

	this.setSFobj = function(sfObj){
		_sfObj = sfObj;
	};

	this.sendFullTree = function (uiTree,clientId) {
		uiTree._clientId = _sfObj._clientId;
		console.log('\n\n******* SF UI - SOCKET EVENT -  Sending full app tree over socket',angular.toJson(uiTree));
		socketIO.emit('sendFullTree', uiTree);
	};

	this.sendConfig = function(sfObj) {
		var data = sfObj.exportConfig();
		socketIO.emit('SF_Client_ConfigExport',data);
		console.log('Config data sent as ',data);
	};

	this.sendUpdate = function (data) {
		console.log('\n\n****** SF UI - SOCKET EVENT - Sending exec data over socket', data);
		socketIO.emit('sendUpdate', data);
	};




};
